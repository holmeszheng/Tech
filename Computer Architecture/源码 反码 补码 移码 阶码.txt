原码：

如果机器字长为n，那么一个数的原码就是用一个n位的二进制数，其中最高位为符号位：正数为0，负数为1。剩下的n-1位表示概数的绝对值。

例如： X=+101011 , [X]原= 00101011    X=-101011 , [X]原= 10101011 
位数不够的用0补全。

PS：正数的原、反、补码都一样：0的原码跟反码都有两个，因为这里0被分为+0和-0。

反码：

知道了什么是原码，那反码就更是张飞吃豆芽――小菜一碟了。知道了原码，那么你只需要具备区分0跟1的能力就可以轻松求出反码，为什么呢？因为反码就是在原码的基础上，符号位不变其他位按位取反(就是0变1，1变0)就可以了。

例如：X=-101011 , [X]原= 10101011 ，[X]反=11010100

补码：

补码也非常的简单就是在反码的基础上按照正常的加法运算加1。

例如：X=-101011 , [X]原= 10101011 ，[X]反=11010100，[X]补=11010101

PS：0的补码是唯一的，如果机器字长为8那么[0]补=00000000。

移码：

移码最简单了，不管正负数，只要将其补码的符号位取反即可。

例如：X=-101011 , [X]原= 10101011 ，[X]反=11010100，[X]补=11010101，[X]移=01010101


总结：
1、正数的原码、补码、反码均为其本身；
2、负数（二进制）的原码、补码、反码公式：
    反码 = 原码（除符号位外）每位取反
    补码 = 反码 + 1
    反码 = 补码  - 1
    移码 = 补码符号位取反


阶码：
单精度浮点数：32位  sign 1	exponent 8       mantissa 23
双精度浮点数：64位  sign 1	exponent 11	 mantissa 52

exopnent部分用的是移码 为的是能一眼看出来数值谁大谁小。
正常的移码位移量是 2 power k
但是因为IEEE754的尾数部分标准化后首位的1会隐藏掉。
比如8是2的3次，不算隐藏为位的话，阶码是3的移码131，但有隐藏位后，尾数部分全部左移一位，阶码减1变成130，并且把尾数的首位数字1隐去。为方便记忆直接称为127移码。
所以是2 power k -1