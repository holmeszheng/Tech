相比较线性表的排序而言，链表排序的内容稍微麻烦一点。一方面，你要考虑数据插入的步骤；另外一方面你也要对指针有所顾虑。要是有一步的内容错了，那么操作系统会马上给你弹出一个exception。就链表的特殊性而言，适合于链表的排序有哪些呢？
    （1）插入排序    （适合）
    （2）冒泡排序    （适合）
    （3）希尔排序    （适合）
    （4）选择排序    （适合）
    （5）快速排序    （不适合）
    （6）合并排序    （不适合）
    （7）基数排序     （不适合）
    （8）堆排序         （不适合）
    其实，一般来说。如果涉及到数据之间的相对关系调配，那么只适合线性排序；如果只是数据内容之间的相互交换，那么这种排序方法也比较适合链表的排序。快速排序、合并排序、堆排序都涉及到了中间值的选取问题，所以不大适合链表排序。
    为了说明链表排序是怎么进行的，我们可以利用插入排序作为示例，描述链表是怎么进行插入排序的。

（程序都是针对有头结点的单向链表进行排序）

1.插入排序

    需要用两个指针对链表进行遍历，一个指针用于标记待插入的节点（外循环），另一个指针用于寻找插入位置（内循环）。因为需要进行节点的删除与插入，因此对用于遍历的两个指针，还需要再添加两个前驱指针。

Node *InsertSortList( Node *L )
{

　　Node *p1, *p2, *temp, *prep1, *prep2;
　　if( L->next->next == NULL )
　　　　return L;
　　for( p1 = L->next->next, prep1 = L->next; p1 != NULL; p1 = p1->next, prep1 = prep1->next )
　　{
　　　　temp = p1;    /*保存待插入节点*/
　　　　for( p2 = L->next, prep2 = L; p2 != p1; p2 = p2->next, prep2 = prep2->next )
　　　　{
　　　　　　if( p2->data > p1->data )
　　　　　　{
　　　　　　　　p1 = p1->next;
　　　　　　　　prep1->next = temp->next;    /*删除待插入节点*/
　　　　　　　　prep2->next = temp;              /*将其插入对应位置*/
　　　　　　　　temp->next = p2;
　　　　　　　　break;
　　　　　　}
　　　　}
　　}
　　return L;
}



2.冒泡排序

比较相邻节点，选出未排序元素中的最大数，需要用一个尾指针由后向前遍历链表。这里不改变链表结构，而是交换节点存储的数据。

Node *BubbleSort( Node *L )
{
　　Node *p, *tail, *next;
　　int temp;
　　if( L->next->next == NULL )
　　　　return L;
　　for( p = L->next; p->next != NULL; p = p->next )    /*尾指针初始化*/
　　　　;
　　tail = p;
　　while( tail != L->next->next )
　　{
　　　　for( p = L->next; p->next != tail; p = p->next )
　　　　{
　　　　　　next = p->next;
　　　　　　if( p->data > next->data )    /*相邻节点比较，数据交换*/
　　　　　　{
　　　　　　　　temp = p->data;
　　　　　　　　p->data = next->data;
　　　　　　　　next->data = temp;
　　　　　　}
　　　　}
　　　　tail = p;    /*p->next == tail，即把tail往前移动一位*/
　　}
　　return L;
}

 

3.选择排序

遍历链表，每次找出一个最小的节点，将其值与未排序节点的首个节点交换，这里需要一个指针标记值最小的节点。

Node *SelectSort( Node *L )
{
　　Node *p, *q, *small;
　　int temp;

　　for( p = L->next; p->next != NULL; p = p->next )    /*每次循环都找出一个最小值，将最小值交换到第一位，然后将指针向后移动一位*/
　　{
　　　　small = p;
　　　　for( q = p->next; q; q = q->next )    /*由前向后遍历，找出最小的节点*/
　　　　{
　　　　　　if( q->data < small->data )
　　　　　　small = q;
　　　　}
　　　　if( small != p )
　　　　{
　　　　　　temp = p->data;
　　　　　　p->data = small->data;
　　　　　　small->data = temp;
　　　　}
　　}
　　return L;
}